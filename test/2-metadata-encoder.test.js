const {
  SAMPLE_USER_DATA,
  SAMPLE_ETH_ADDRESS_1,
  SAMPLE_ETH_ADDRESS_2,
  SAMPLE_METADATA_CHAIN_ID_1,
  SAMPLE_METADATA_CHAIN_ID_2,
} = require('./test-utils')
const assert = require('assert')
const { silenceConsoleOutput } = require('./test-utils')
const { encodeCoreMetadata } = require('../lib/metadata-encoder')

describe('Metadata Encoder Contract', () => {
  silenceConsoleOutput()

  it('Should encode core metadata v1', async () => {
    const result = await encodeCoreMetadata(
      SAMPLE_USER_DATA,
      SAMPLE_METADATA_CHAIN_ID_1,
      SAMPLE_ETH_ADDRESS_1,
    )
    /* eslint-disable-next-line max-len */
    const expectedResult = '0x0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000f3436800000000000000000000000000000000000000000000000000000000000000000000000000000000fedfe2616eb3661cb8fed2782f5f0cc91d59dcac0000000000000000000000000000000000000000000000000000000000000003d3caff0000000000000000000000000000000000000000000000000000000000'
    assert.strictEqual(result, expectedResult)
  })

  it('Should encode core metadata v2', async () => {
    const result = await encodeCoreMetadata(
      SAMPLE_USER_DATA,
      SAMPLE_METADATA_CHAIN_ID_1,
      SAMPLE_ETH_ADDRESS_1,
      SAMPLE_METADATA_CHAIN_ID_2,
      SAMPLE_ETH_ADDRESS_2,
    )
    /* eslint-disable-next-line max-len */
    const expectedResult = '0x0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000f3436800000000000000000000000000000000000000000000000000000000000000000000000000000000fedfe2616eb3661cb8fed2782f5f0cc91d59dcac0069c32200000000000000000000000000000000000000000000000000000000000000000000000000000000edb86cd455ef3ca43f0e227e00469c3bdfa40628000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003d3caff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
    assert.strictEqual(result, expectedResult)
  })
})
